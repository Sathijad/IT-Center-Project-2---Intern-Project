name: CI Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'
      
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      
      - name: Run backend tests
        run: |
          cd auth-backend
          ./mvnw test jacoco:report jacoco:check
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-coverage
          path: auth-backend/target/site/jacoco/
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: backend-test-results
          path: auth-backend/target/surefire-reports/

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: admin-web/package-lock.json
      
      - name: Install dependencies
        run: |
          cd admin-web
          npm ci
      
      - name: Run frontend tests
        run: |
          cd admin-web
          npm test -- --run --reporter=verbose
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: frontend-test-results
          path: admin-web/coverage/

  mobile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'
      
      - name: Get dependencies
        run: |
          cd mobile-app
          flutter pub get
      
      - name: Run Flutter tests
        run: |
          cd mobile-app
          flutter test --coverage
      
      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: flutter-coverage
          path: mobile-app/coverage/

  api-tests:
    runs-on: ubuntu-latest
    needs: backend
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup PostgreSQL
        uses: ankane/setup-postgres@v1
        with:
          postgresql-version: '15'
          postgresql-db: 'itcenter_test'
          postgresql-user: 'postgres'
          postgresql-password: 'postgres'
      
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'
      
      - name: Start backend
        run: |
          cd auth-backend
          ./mvnw spring-boot:run &
          sleep 30
      
      - name: Install Newman
        run: npm install -g newman
      
      - name: Run API tests with Newman
        run: |
          newman run tests/postman/itcenter-auth.postman_collection.json \
            -e tests/postman/itcenter-auth.postman_environment.json \
            --reporters cli,junit \
            --reporter-junit-export newman-results.xml
        continue-on-error: true
      
      - name: Upload Newman results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: newman-results
          path: newman-results.xml

  security-scan:
    runs-on: ubuntu-latest
    needs: backend
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'
      
      - name: Start backend for scan
        run: |
          cd auth-backend
          ./mvnw spring-boot:run &
          sleep 30
      
      - name: Run ZAP baseline scan
        run: |
          docker run --rm -t owasp/zap2docker-stable zap-baseline.py \
            -t http://host.docker.internal:8080 \
            -r zap-report-backend.html -d || true
        continue-on-error: true
      
      - name: Upload ZAP report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: zap-reports
          path: zap-report-*.html

  test-results:
    runs-on: ubuntu-latest
    needs: [backend, frontend, mobile, api-tests]
    if: always()
    steps:
      - uses: actions/checkout@v3
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Display test summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Backend tests completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Frontend tests completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Mobile tests completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ API tests completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "See artifacts for detailed reports." >> $GITHUB_STEP_SUMMARY

