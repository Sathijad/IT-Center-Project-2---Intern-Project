openapi: 3.0.3
info:
  title: IT Center Auth API
  version: 1.0.0
  description: |
    Staff authentication and role management API with AWS Cognito OIDC integration.
    
    **Authentication**: JWT tokens from AWS Cognito
    **Authorization**: Role-based access control (ADMIN, EMPLOYEE)

servers:
  - url: http://localhost:8080
    description: Local development
  - url: https://api-dev.itcenter.com
    description: Development environment
  - url: https://api.itcenter.com
    description: Production environment

paths:
  /healthz:
    get:
      summary: Health check endpoint
      operationId: healthCheck
      tags:
        - System
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: UP

  /api/v1/me:
    get:
      summary: Get current user profile
      operationId: getCurrentUser
      tags:
        - Profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthenticated'

    patch:
      summary: Update current user profile
      operationId: updateCurrentUser
      tags:
        - Profile
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                display_name:
                  type: string
                  maxLength: 50
                locale:
                  type: string
                  pattern: '^[a-z]{2}-[A-Z]{2}$'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthenticated'

  /api/v1/admin/users:
    get:
      summary: List users (ADMIN only)
      operationId: listUsers
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          description: Search query (email or display name)
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: sort
          in: query
          schema:
            type: string
            enum: [email, display_name, created_at, last_login]
            default: created_at
      responses:
        '200':
          description: Paginated list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  page:
                    type: integer
                  size:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/v1/admin/users/{id}:
    delete:
      summary: Permanently delete user and all related data
      description: |
        Hard delete: permanently removes the user row from app_users and all related data:
        - user_roles entries
        - login_audit entries
        - Any other data referencing the user via foreign keys with ON DELETE CASCADE
      operationId: deleteUser
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: User ID to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User permanently deleted
        '403':
          description: Forbidden - ADMIN role required
        '404':
          description: User not found
    get:
      summary: Get user details (ADMIN only)
      operationId: getUserById
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'

    patch:
      summary: Update user roles (ADMIN only)
      operationId: updateUserRoles
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                roles:
                  type: array
                  items:
                    type: string
                  example: ["ADMIN", "EMPLOYEE"]
      responses:
        '200':
          description: Roles updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/admin/audit-log:
    get:
      summary: View audit log (ADMIN only)
      operationId: getAuditLog
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: query
          schema:
            type: integer
        - name: event_type
          in: query
          schema:
            type: string
        - name: start_date
          in: query
          schema:
            type: string
            format: date-time
        - name: end_date
          in: query
          schema:
            type: string
            format: date-time
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Paginated audit log
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditEntry'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
        '403':
          $ref: '#/components/responses/Forbidden'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserProfile:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        display_name:
          type: string
        locale:
          type: string
        roles:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        last_login:
          type: string
          format: date-time

    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        display_name:
          type: string
        locale:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        last_login:
          type: string
          format: date-time

    UserDetails:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            roles:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  assigned_at:
                    type: string
                    format: date-time

    AuditEntry:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        user_email:
          type: string
        event_type:
          type: string
          enum: [LOGIN_SUCCESS, LOGIN_FAILURE, ROLE_ASSIGNED, ROLE_REMOVED, PROFILE_UPDATED]
        ip_address:
          type: string
        user_agent:
          type: string
        metadata:
          type: object
        created_at:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        traceId:
          type: string
        timestamp:
          type: string

  responses:
    Unauthenticated:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

